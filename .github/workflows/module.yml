name: module

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
    paths-ignore:
      - 'README.md'
  schedule:
    - cron: "0 7 * * *"

concurrency: this

env:
  TF_INPUT: false
  TF_IN_AUTOMATION: true
  TF_STATE_BUCKET: "env-tfbackend-oss-backend"
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}
  MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}
  MONGODB_ATLAS_ORG: ${{ secrets.MONGODB_ATLAS_ORG }}
  SLACK_URL: ${{ secrets.SLACK_URL }}
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
  NEW_RELIC_REGION: ${{ secrets.NEW_RELIC_REGION }}
  NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}

defaults:
  run:
    shell: bash
    working-directory: test/src

jobs:
  list-examples:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        working-directory: examples
        run: |
          EXAMPLES=$(ls -1 | jq -Rsc '. / "\n" - [""]')
          echo $EXAMPLES
          echo "EXAMPLES=$EXAMPLES" >> $GITHUB_OUTPUT
    outputs:
      EXAMPLES: ${{ steps.set-matrix.outputs.EXAMPLES }}
  run-example:
    needs: list-examples
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        EXAMPLES: ${{ fromJson(needs.list-examples.outputs.EXAMPLES) }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: hashicorp/setup-terraform@v2.0.3 # https://github.com/hashicorp/setup-terraform/releases
        with:
          terraform_version: 1.3.5 # https://github.com/hashicorp/terraform/releases
          terraform_wrapper: false
      - name: TF_VAR_git
        run: echo "TF_VAR_git=$(echo ${GITHUB_REPOSITORY} | sed -e 's|.*/||')" >> $GITHUB_ENV
      - name: init
        working-directory: ${{ matrix.EXAMPLES }}
        run: terraform init
      - name: validate
        working-directory: ${{ matrix.EXAMPLES }}
        run: terraform validate
      - name: plan
        working-directory: ${{ matrix.EXAMPLES }}
        run: terraform plan -out=tfplan
      - name: apply
        working-directory: ${{ matrix.EXAMPLES }}
        run: terraform apply -auto-approve tfplan
      - name: check
        working-directory: ${{ matrix.EXAMPLES }}
        run: terraform plan -detailed-exitcode
      - name: destroy
        working-directory: ${{ matrix.EXAMPLES }}
        run: terraform destroy -auto-approve
  check-examples:
    needs: run-example
    runs-on: ubuntu-latest
    if: success()
    steps:
      - id: setoutput
        working-directory: .
        run: echo "SUCCESS=true" >> $GITHUB_OUTPUT
    outputs:
      SUCCESS: ${{ steps.setoutput.outputs.SUCCESS }}
  module:
    runs-on: ubuntu-latest
    if: always()
    needs: [run-example, check-examples]
    steps:
      - name: module
        working-directory: .
        run: |
          passed="${{ needs.check-tests.outputs.SUCCESS }}"
          if [[ $passed == "true" ]]; then
            echo "tests passed"
            exit 0
          else
            echo "tests failed"
            exit 1
          fi
  github-issue-notification:
    needs: [ module ]
    if: failure() && github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set-env-info
        run: |
          echo "GIT_REPO=$(echo ${GITHUB_REPOSITORY} | sed -e 's|.*/||')" >> $GITHUB_ENV
          echo "GITHUB_WORKFLOW_NAME=$(echo ${GITHUB_WORKFLOW} | sed -e 's|.*/||')" >> $GITHUB_ENV
          echo "GITHUB_REF_NAME=$(echo ${GITHUB_REF_NAME})" >> $GITHUB_ENV
      - name: github-issue-notification
        uses: champ-oss/action-github-issue-notification@v1.0.0-421559f
        with:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
          GITHUB_ORG: champ-oss
          GITHUB_REPO: ${{ env.GIT_REPO }}
          GITHUB_CUSTOM_LABEL: ${{ env.GITHUB_WORKFLOW_NAME }}
          GITHUB_BRANCH_LABEL: ${{ env.GITHUB_REF_NAME }}
